import { RichText, MediaUpload, MediaUploadCheck } from '@wordpress/block-editor';
import { Button, TextControl, ToggleControl, SelectControl } from '@wordpress/components';
import ServerSideRender from '@wordpress/server-side-render';

const Column = (props) => {
  return <div style={{width: props.width, padding: '5px'}}>{props.children}</div>
}

function registerHelper( name, fields, options ) {
  const origAttributes = {};

  for (const [fieldName, field] of Object.entries(fields)) {
    // copy relevant parts of the fields object to generate attributes
    const newValue = {};
    newValue.type = field.type;
    newValue.default = field.default;
    
    origAttributes[fieldName] = newValue;
  }
	console.log('origAttributes', origAttributes)

  const edit = ({ attributes, setAttributes, isSelected }) => {
		console.log('attributes',attributes)
		if (isSelected) {
    		return (
					<div style={{backgroundColor: '#f5f5f5', padding: '15px', borderRadius: '5px', display: 'flex', flexWrap: 'wrap'}}>
						<h2 style={{fontSize: '12px', textTransform: 'uppercase', letterSpacing: '2px', marginTop: '0', width: '100%'}}>{ options.title }</h2>
						{Object.entries(fields).map(function([fieldName, field]) {
							switch(field.input) {
								case 'checkbox':
									return (
										<Column width="100%">
											<ToggleControl
												label={field.label}
												onChange={(e) => { 
													setAttributes({
														[fieldName]: !attributes[fieldName]
													})
												}}
												checked={ attributes[fieldName] } 
											/>
										</Column>
									);
								case 'text':
									return (
										<Column width="50%">
											<TextControl
												label={field.label}
												value={attributes[fieldName]}
												onChange= { (text) => {
													setAttributes({
														[fieldName]: text
													})
												}}
											/>
										</Column>
									);
								case 'select':
									return (
										<Column width="50%">
											<SelectControl
												label={field.label}
												value={attributes[fieldName]}
												onChange= { (val) => {
													setAttributes({
														[fieldName]: val
													})
												}}
												options = {field.options}
											/>
										</Column>
									);
								case 'image':
									return (
										<Column width="50%">
											<MediaUploadCheck>
												<MediaUpload
													onSelect={ ( media ) => {
														setAttributes( { 
															[fieldName]: {
																id: media.id,
																sizes: media.sizes,
																url: media.url
															}
														} )
													} }
													allowedTypes={ [ 'image' ] }
													value={ attributes[fieldName] }
													render={ ( { open } ) => (
														<>
															{ !attributes[fieldName] ? (
																<Button onClick={ open } isPrimary>
																	{field.label}
																</Button>
															) : (
																<>
																	<img 
																		onClick={ open } 
																		src={attributes[fieldName].url}
																		style={{width: '150px', height: '150px', objectFit: 'cover', marginRight: '10px', background: 'white'}}
																	/>
																	<Button onClick={ () => { setAttributes( {[fieldName]: undefined } ) }} isSecondary>
																		Bild entfernen
																	</Button>
																</>
															)}
														</>
													) }
												/>
											</MediaUploadCheck>
										</Column>
									);
								case 'richText':
									return (
										<Column width="50%">
											<RichText 
												className='components-text-control__input'
												value={attributes[fieldName]}
												onChange={ (text) => {
													setAttributes({
														[fieldName]: text
													})
												}}
												placeholder='Text einfÃ¼gen...'
											/>
										</Column>
									)
								default:
									return;
							}
						})}
					</div>
				) } else {
					return (
						<ServerSideRender
							block={ name }
							attributes={ attributes }
						/>
					)
				}
  }
  
  return {
    edit,
    save: () => {
      return null; // default: for server side rendered blocks, can be overwritten
    },
    ...options,
    attributes: origAttributes // ALWAYS uses attributes generated by fields object
  }
}

function fastBlock(name, fields, blockSettings) {
  wp.blocks.registerBlockType(name, registerHelper(name, fields, blockSettings));
}

/**
 * Register All Blocks that are radded with the PHP helper function add_fast_block
 */
Object.values(fastBlockBlocks).forEach( block => {
  fastBlock(block.name, block.fields, block.settings);
})
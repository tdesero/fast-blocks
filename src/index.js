import { InspectorControls, RichText } from '@wordpress/block-editor';
import { Button, TextControl, ToggleControl, SelectControl, PanelBody } from '@wordpress/components';
import ServerSideRender from '@wordpress/server-side-render';

import { __ } from '@wordpress/i18n';

import ImageUpload from './components/ImageUpload';


function registerHelper( name, fields, options ) {
  const origAttributes = {};

  for (const [fieldName, field] of Object.entries(fields)) {
    // copy relevant parts of the fields object to generate attributes
    const newValue = {};
    newValue.type = field.type;
    newValue.default = field.default;
    
    origAttributes[fieldName] = newValue;
  }

  const edit = (props) => {
		const { attributes, setAttributes } = props;
		return (
			<>
				<InspectorControls>
					<PanelBody>
						{Object.entries(fields).map(function([fieldName, field]) {
							switch(field.input) {
								case 'checkbox':
									return (
											<ToggleControl
												label={field.label}
												onChange={(e) => { 
													setAttributes({
														[fieldName]: !attributes[fieldName]
													})
												}}
												checked={ attributes[fieldName] } 
											/>
									);
								case 'text':
									return (
											<TextControl
												label={field.label}
												value={attributes[fieldName]}
												onChange= { (text) => {
													setAttributes({
														[fieldName]: text
													})
												}}
											/>
									);
								case 'select':
									return (
											<SelectControl
												label={field.label}
												value={attributes[fieldName]}
												onChange= { (val) => {
													setAttributes({
														[fieldName]: val
													})
												}}
												options = {field.options}
											/>
									);
								case 'image':
									return (
											<ImageUpload 
												attributes={attributes}
												setAttributes={setAttributes}
												field={field}
												fieldName={fieldName}
											/>
									);
								case 'richText':
									console.log(props);
									return (
											<>
												<p>{field.label}</p>
												<RichText 
													className='components-text-control__input'
													style={{marginBottom: '10px'}}
													value={attributes[fieldName]}
													onChange={ (text) => {
														setAttributes({
															[fieldName]: text
														})
													}}
													placeholder={__('Add textâ€¦')}
													inlineToolbar 
												/>
											</>
									)
								default:
									return;
							}
						})}
					</PanelBody>
				</InspectorControls>
				<ServerSideRender
					block={ name }
					attributes={ attributes }
				/>
			</>
			)
  }
  
  return {
    edit,
    save: () => {
      return null; // default: for server side rendered blocks, can be overwritten
    },
    ...options,
    attributes: origAttributes // ALWAYS uses attributes generated by fields object
  }
}

function fastBlock(name, fields, blockSettings) {
  wp.blocks.registerBlockType(name, registerHelper(name, fields, blockSettings));
}

/**
 * Register All Blocks that are radded with the PHP helper function add_fast_block
 */
Object.values(fastBlockBlocks).forEach( block => {
  fastBlock(block.name, block.fields, block.settings);
})
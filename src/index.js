import { InnerBlocks, InspectorControls } from '@wordpress/block-editor';
import { Button, PanelBody, Notice, Snackbar } from '@wordpress/components';
import ServerSideRender from '@wordpress/server-side-render';

import { switchComponents } from './switchComponents';


function registerHelper( name, fields, options, children ) {
  const origAttributes = {};

  for (const [fieldName, field] of Object.entries(fields)) {
    // copy relevant parts of the fields object to generate attributes
    const newValue = {};
    newValue.type = field.type;
    newValue.default = field.default;
    
    origAttributes[fieldName] = newValue;
  }

  const edit = (props) => {
		const { attributes, setAttributes, isSelected } = props;
		return (
			<>
				<InspectorControls>
					<PanelBody>
						{Object.entries(fields).map(function([fieldName, field]) {
							return switchComponents(field, setAttributes, fieldName, attributes, props);
						})}
					</PanelBody>

				</InspectorControls>
				{ isSelected && <Snackbar status="info" isDismissible={false}>Edit fields inside the right panel</Snackbar> }
				<label style={{fontSize: '10px'}}>{options.title}</label>
				<div style={{cursor: isSelected ? 'not-allowed' : 'default'}}>
					<ServerSideRender
						block={ name }
						attributes={ attributes }
					/>
				</div>
				{ children && (
					<div style={{border: '1px dashed grey', padding: '10px'}} >
						<InnerBlocks
							allowedBlocks={ children }
							orientation='horizontal'
							renderAppender={ InnerBlocks.ButtonBlockAppender }
						/>
					</div>
				)}
			</>
			)
  }
  
  return {
    edit,
    save: () => {
			return <InnerBlocks.Content />; // default: for server side rendered blocks, can be overwritten
    },
    ...options,
    attributes: origAttributes // ALWAYS uses attributes generated by fields object
  }
}

function fastBlock(name, fields, blockSettings, children) {
  wp.blocks.registerBlockType(name, registerHelper(name, fields, blockSettings, children));
}

/**
 * Register All Blocks that are added with the PHP helper function add_fast_block
 * const fastBlockBlocks is made available with PHP
 */
Object.values(fastBlockBlocks).forEach( block => {
  fastBlock(block.name, block.fields, block.settings, block.children);
})